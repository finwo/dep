#!/usr/bin/env bash
cmds=("")
declare -A help_topics

read -r -d '' help_topics[global] <<- EOF
Usage: dep [global options] <command> [options] [-- ...args]

Global options:
  n/a

Commands:
  a(dd)           Add a new dependency to the project
  i(nstall)       Install all the project's dependencies
  h(elp) [topic]  Show this help or the top-level info about a command
  r(epo(sitory))  Repository management

Help topics:
  global          This help text
  add             More detailed explanation on the add command
  install         More detailed explanation on the install command
  repository      More detailed explanation on the repository command
EOF

HELP_TOPIC=global
function arg_h {
  arg_help "$@"
  return $?
}
function arg_help {
  if [[ $# -gt 0 ]]; then
    HELP_TOPIC=$1
  fi
  shift
}

function cmd_h {
  cmd_help "$@"
  return $?
}
function cmd_help {
  if [ -z "${help_topics[$HELP_TOPIC]}" ]; then
    echo "Unknown topic: $HELP_TOPIC" >&2
    exit 1
  fi

  echo -e "\n${help_topics[$HELP_TOPIC]}\n"
}

cmds[${#cmds[*]}]="h"
cmds[${#cmds[*]}]="help"


# Required for the whitespace trimming
shopt -s extglob

# None

# Arguments:
#   $0 <fn_keyHandler> <str_filename> [section[.key]]
function ini_foreach {

  # No file = no data
  inifile="${2}"
  if [[ ! -f "$inifile" ]]; then
    exit 1
  fi

  # Process the file line-by-line
  SECTION=
  while read line; do

    # Fix newlines
    line=$(echo $line | tr -d '\015')

    # Remove surrounding whitespace
    line=${line##*( )} # From the beginning
    line=${line%%*( )} # From the end

    # Remove comments and empty lines
    if [[ "${line:0:1}" == '#' ]] || [[ "${line:0:1}" == ';' ]] || [[ "${#line}" == 0 ]]; then
      continue
    fi

    # Handle section markers
    if [[ "${line:0:1}" == "[" ]]; then
      SECTION=$(echo $line | sed -e 's/\[\(.*\)\]/\1/')
      SECTION=${SECTION##*( )}
      SECTION=${SECTION%%*( )}
      SECTION="${SECTION}."
      continue
    fi

    # Output found variable
    NAME=${line%%=*}
    NAME=${NAME%%*( )}
    VALUE=${line#*=}
    VALUE=${VALUE##*( )}

    # Output searched or all
    if [[ -z "${3}" ]]; then
      $1 "$SECTION" "$NAME" "${VALUE}"
    elif [[ "${SECTION}" == "${3}" ]] || [[ "${SECTION}${NAME}" == "${3}" ]]; then
      $1 "$SECTION" "$NAME" "${VALUE}"
    fi

  done < "${inifile}"
}

function ini_write {
  PREVIOUSSECTION=
  echo -en "" > "$1"
  while read line; do
    KEYFULL=${line%%=*}
    VALUE=${line#*=}
    SECTION=${KEYFULL%%.*}
    KEY=${KEYFULL#*.}
    if [[ "${SECTION}" != "${PREVIOUSSECTION}" ]]; then
      if [ ! -z "${PREVIOUSSECTION}" ]; then
        echo "" >> "$1"
      fi
      echo "[${SECTION}]" >> "$1"
      PREVIOUSSECTION="${SECTION}"
    fi
    echo "${KEY}=${VALUE}" >> "$1"
  done < <(sort --unique)
}

function ini_output_full {
  echo "$1$2=$3"
}
function ini_output_section {
  echo "$2=$3"
}
function ini_output_value {
  echo "$3"
}

# Allow this file to be called stand-alone
# ini.sh <filename> [section[.key]] [sectionmode]
if [ $(basename $0) == "ini.sh" ]; then
  fullMode=full
  sectionMode=value
  if [[ ! -z "${3}" ]]; then
    fullMode=${3}
    sectionMode=${3}
  fi
  if [[ -z "${2}" ]]; then
    ini_foreach ini_output_${fullMode} "$@"
  else
    ini_foreach ini_output_${sectionMode} "$@"
  fi
fi

# None

read -r -d '' help_topics[add] <<- EOF
Usage: dep [global options] add <name> <url>

Description:

  The add command will add a dependency to your package.ini and trigger the
  install command to do the actual install.

Arguments:

  name  The name of the dependency that will be installed. This will be used as
        the target directory within lib as well.

  url   The url pointing to the package.ini that describes the dependency.
EOF

CMD_ADD_ARGS=

function arg_a {
  arg_add "$@"
  return $?
}
function arg_add {
  CMD_ADD_ARGS=("$@")
  return 0
}

function cmd_a {
  cmd_add "$@"
  return $?
}
function cmd_add {
  OLD_PKG=$(ini_foreach ini_output_full "package.ini")

  # TODO: Assume package name is github repo if missing?

  # Get target & main package file
  PKG=(${CMD_ADD_ARGS[0]//@/ })
  PKGINIB="${HOME}/.config/finwo/dep/packages/${PKG[0]}/package.ini"
  if [ ! -f "${PKGINIB}" ]; then
    echo "Package not found. Did you update your repositories?" >&2
    exit 1
  fi

  # Get the version to add
  if [ -z "${PKG[1]}" ]; then PKG[1]=$(ini_foreach ini_output_value "${PKGINIB}" "package.channel" | tail -n 1); fi
  if [ -z "${PKG[1]}" ]; then PKG[1]=$(ini_foreach ini_output_value "package.ini" "package.channel" | tail -n 1); fi
  if [ -z "${PKG[1]}" ]; then
    echo "Could not determine desired package version. Set 'package.channel' in your package.ini to select a fallback or use 'dep repository add ${PKG[0]}@<version>' to select a specific version." >&2
    exit 1
  fi

  # Fetch the version-specific ini
  PKGINIV="${HOME}/.config/finwo/dep/packages/${PKG[0]}/${PKG[1]}/package.ini"
  PKGINI=
  if [ -f "${PKGINIB}" ]; then PKGINI="${PKGINIB}"; fi
  if [ -f "${PKGINIV}" ]; then PKGINI="${PKGINIV}"; fi

  # Extension: Check release/branch on github
  PKGGH=$(ini_foreach ini_output_value "${PKGINI}" "repository.github")
  if [ ! -z "${PKGGH}" ]; then
    URL_TAG="https://codeload.github.com/${PKGGH}/tar.gz/refs/tags/${PKG[1]}"
    URL_BRANCH="https://codeload.github.com/${PKGGH}/tar.gz/refs/heads/${PKG[1]}"
    CODE_TAG=$(curl -X HEAD --fail --dump-header - -o /dev/null "${URL_TAG}" 2>/dev/null | head -1 | awk '{print $2}')
    CODE_BRANCH=$(curl -X HEAD --fail --dump-header - -o /dev/null "${URL_BRANCH}" 2>/dev/null | head -1 | awk '{print $2}')
    if [ "${CODE_TAG}" != "200" ] && [ "${CODE_BRANCH}" != "200" ]; then
      echo "No release or branch '${PKG[1]}' found in the github repository ${PKGGH}." >&2
      echo "Check https://github.com/${PKGGH} to see the available releases and branches" >&2
      exit 1
    fi
  fi

  # Add the package to the dependencies
  (echo "dependencies.${PKG[0]}=${PKG[1]}" ; echo -e "${OLD_PKG}") | ini_write "package.ini"
  echo "Added to your package.ini: ${PKG[0]}@${PKG[1]}"
}

cmds[${#cmds[*]}]="a"
cmds[${#cmds[*]}]="add"

function ostype {
  case "$OSTYPE" in
    darwin*) echo "osx" ;;
    linux*)  echo "lin" ;;
    bsd*)    echo "bsd" ;;
    msys*)   echo "win" ;;
    cygwin*) echo "win" ;;
    *)       echo "unknown" ;;
  esac
}

# None

read -r -d '' help_topics[install] <<- EOF
Usage: dep [global options] install

Description:

  The install command will iterate over all dependencies listed in your
  project's package.ini and install them 1-by-1, installing the dependency's
  dependencies as well.
EOF

CMD_INSTALL_PKG_NAME=
CMD_INSTALL_PKG_DEST="lib"

function arg_i {
  arg_install "$@"
  return $?
}
function arg_install {
  return 0
}

function cmd_i {
  cmd_install "$@"
  return $?
}
function cmd_install {

  # Sanity check
  PACKAGE_PATH="$(pwd)/package.ini"
  if [ ! -f "${PACKAGE_PATH}" ]; then
    echo "No package.ini in the working directory!" >&2
    exit 1
  fi

  # Fetch where to install dependencies
  CMD_INSTALL_PKG_DEST=$(ini_foreach ini_output_value "${PACKAGE_PATH}" "package.deps")
  if [ -z "${CMD_INSTALL_PKG_DEST}" ]; then CMD_INSTALL_PKG_DEST="lib"; fi

  # Reset working directory - keep cache
  rm -fr "${CMD_INSTALL_PKG_DEST}/.dep/include"
  mkdir -p "${CMD_INSTALL_PKG_DEST}/.dep/include"
  echo "INCLUDES+=-I${CMD_INSTALL_PKG_DEST}/.dep/include" > "${CMD_INSTALL_PKG_DEST}/.dep/config.mk"
  echo -n "" > "${CMD_INSTALL_PKG_DEST}/.dep/exported"

  # Install all dependencies
  ini_foreach cmd_install_parse_ini "${PACKAGE_PATH}"
  echo "Done"
}

cmds[${#cmds[*]}]="i"
cmds[${#cmds[*]}]="install"

declare -A CMD_INSTALL_DEPS
function cmd_install_parse_ini {
  case "$1" in
    dependencies.)
      cmd_install_dep "$2" "$3"
      ;;
  esac

    # package.)
    #   case "$2" in
    #     name)
    #       CMD_INSTALL_PKG_NAME="$3"
    #       ;;
    #     deps)
    #       CMD_INSTALL_PKG_DEST="$3"
    #       ;;
    #   esac
    #   ;;
    # dependencies.)
    #   CMD_INSTALL_DEPS["$2"]="$3"
    #   ;;
  # esac

}

# function cmd_install_execute {
#   cmd_install_reset_generated
#   for key in "${!CMD_INSTALL_DEPS[@]}"; do
#     cmd_install_dep "$key" "${CMD_INSTALL_DEPS[$key]}"
#   done
# }

function cmd_install_dep {
  local PKGNAME=$1
  local PKGVER=$2

  # Fetch versioned ini
  local PKGINIB="${HOME}/.config/finwo/dep/packages/${PKGNAME}/package.ini"
  local PKGINIV="${HOME}/.config/finwo/dep/packages/${PKGNAME}/${PKGVER}/package.ini"
  local PKGINI=
  if [ -f "${PKGINIB}" ]; then PKGINI="${PKGINIB}"; fi
  if [ -f "${PKGINIV}" ]; then PKGINI="${PKGINIV}"; fi
  if [ -z "${PKGINI}" ]; then
    echo "No package configuration found for ${PKGNAME}" >&2
    exit 1
  fi

  local PKG_DIR="${CMD_INSTALL_PKG_DEST}/${PKGNAME}"
  if [ -d "${PKG_DIR}" ]; then
    # Already installed, just update the pkgini ref
    PKGINI="${CMD_INSTALL_PKG_DEST}/${PKGNAME}/package.ini"
  else
    # Not installed yet, fetch code & run build steps

    # Copy repository's config for the package
    local PKG_SRC=$(dirname "${PKGINI}")
    mkdir -p "$(dirname "${PKG_DIR}")"
    cp -r "${PKG_SRC}" "$(dirname ${PKG_DIR})"
    PKGINI="${PKG_DIR}/package.ini"

    # Extended fetching detection
    local PKG_GH=$(ini_foreach ini_output_value "${PKGINI}" "repository.github")
    local PKG_TARBALL=$(ini_foreach ini_output_value "${PKGINI}" "package.src")

    # Fetch target tarball from github repo
    if [ ! -z "${PKG_GH}" ]; then
      URL_TAG="https://codeload.github.com/${PKG_GH}/tar.gz/refs/tags/${PKGVER}"
      URL_BRANCH="https://codeload.github.com/${PKG_GH}/tar.gz/refs/heads/${PKGVER}"
      CODE_TAG=$(curl -X HEAD --fail --dump-header - -o /dev/null "${URL_TAG}" 2>/dev/null | head -1 | awk '{print $2}')
      CODE_BRANCH=$(curl -X HEAD --fail --dump-header - -o /dev/null "${URL_BRANCH}" 2>/dev/null | head -1 | awk '{print $2}')
      if [ "${CODE_TAG}" == "200" ]; then
        PKG_TARBALL="${URL_TAG}"
      elif [ "${CODE_BRANCH}" == "200" ]; then
        PKG_TARBALL="${URL_BRANCH}"
      fi
    fi

    # Fetch configured or detected tarball
    if [ ! -z "${PKG_TARBALL}" ]; then
      # Downloads a tarball and extracts if over the package in our dependency directory
      # TARBALL_FILE="${HOME}/.config/finwo/dep/cache/${PKGNAME}/${PKGVER}.tar.gz"
      TARBALL_FILE="${CMD_INSTALL_PKG_DEST}/.dep/cache/${PKGNAME}/${PKGVER}.tar.gz"
      mkdir -p "$(dirname "${TARBALL_FILE}")"
      if [ ! -f "${TARBALL_FILE}" ]; then
        curl --location --progress-bar "${PKG_TARBALL}" --output "${TARBALL_FILE}"
      fi
      tar --extract --directory "${PKG_DIR}/" --strip-components 1 --file="${TARBALL_FILE}"
    fi

    # Install this dependency's dependencies
    while read line; do
      depname=${line%%=*}
      depver=${line#*=}
      cmd_install_dep "$depname" "$depver"
    done < <(ini_foreach ini_output_section "${PKGINI}" "dependencies." | sort --human-numeric-sort)

    # Handle any global build-steps defined in the package.ini
    while read line; do
      buildcmd=${line#*=}
      echo + $buildcmd
      bash -c "cd '${PKG_DIR}' ; ${buildcmd}"
    done < <(ini_foreach ini_output_section "${PKGINI}" "build." | sort --human-numeric-sort)

    # Handle any os-generic build-steps defined in the package.ini
    while read line; do
      buildcmd=${line#*=}
      echo + $buildcmd
      bash -c "cd '${PKG_DIR}' ; ${buildcmd}"
    done < <(ini_foreach ini_output_section "${PKGINI}" "build-$(ostype)." | sort --human-numeric-sort)
  fi

  # Build the package's exports
  if ! grep "${PKGNAME}" "${CMD_INSTALL_PKG_DEST}/.dep/exported" &>/dev/null ; then
    echo "${PKGNAME}" >> "${CMD_INSTALL_PKG_DEST}/.dep/exported"
    while read line; do
      filetarget=${line%%=*}
      filesource=${line#*=}
      mkdir -p "$(dirname "${CMD_INSTALL_PKG_DEST}/.dep/${filetarget}")"
      case "${filetarget}" in
        exported|cache/*)
          # Blocked
          ;;
        config.mk)
          cat "${PKG_DIR}/${filesource}" | sed "s|__DIRNAME|${PKG_DIR}|g" >> "${CMD_INSTALL_PKG_DEST}/.dep/${filetarget}"
          ;;
        *)
          ln -sf "$(pwd)/${CMD_INSTALL_PKG_DEST}/${name}/${filesource}" "${CMD_INSTALL_PKG_DEST}/.dep/${filetarget}"
          # cp "${PKG_DIR}/${filesource}" "${CMD_INSTALL_PKG_DEST}/.dep/${filetarget}"
          ;;
      esac
    done < <(ini_foreach ini_output_section "${PKGINI}" "export.")
  fi

}

read -r -d '' help_topics[repository] <<- EOF
Usage: dep [global options] repository <command> <argument>

Commands:

  a(dd)      <name> <manifest-url>  Add a repository to fetch packages from
  d(el(ete)) <name>                 Delete a repository
  c(lean)                           Remove packages cache
  u(pdate)                          Update packages cache
EOF

CMD_REPO_CMD=
CMD_REPO_NAME=
CMD_REPO_LOC=

function arg_r {
  arg_repository "$@"
  return $?
}
function arg_repo {
  arg_repository "$@"
  return $?
}
function arg_repository {
  CMD_REPO_CMD=$1

  case "${CMD_REPO_CMD}" in
    a|add)
      CMD_REPO_NAME=$2
      CMD_REPO_LOC=$3
      ;;
    d|del|delete)
      CMD_REPO_NAME=$2
      ;;
    c|clean)
      # Intentionally empty
      ;;
    u|update)
      # Intentionally empty
      ;;
    *)
      echo "Unknown command: ${CMD_REPO_CMD}" >&2
      exit 1
      ;;
  esac

  return 0
}

function cmd_r {
  cmd_repository "$@"
  return $?
}
function cmd_repo {
  cmd_repository "$@"
  return $?
}
function cmd_repository {
  case "${CMD_REPO_CMD}" in
    a|add)
      mkdir -p "${HOME}/.config/finwo/dep/repositories.d"
      echo "${CMD_REPO_NAME}=${CMD_REPO_LOC}" >> "${HOME}/.config/finwo/dep/repositories.d/50-${CMD_REPO_NAME}"
      ;;
    d|del|delete)
      mkdir -p "${HOME}/.config/finwo/dep/repositories.d"
      rm -f "${HOME}/.config/finwo/dep/repositories.d/*-${CMD_REPO_NAME}"
      ;;
    c|clean)
      rm -rf "${HOME}/.config/finwo/dep/packages"
      mkdir -p "${HOME}/.config/finwo/dep/packages"
      ;;
    u|update)
      rm -rf "${HOME}/.config/finwo/dep/packages"
      mkdir -p "${HOME}/.config/finwo/dep/packages"
      mkdir -p "${HOME}/.config/finwo/dep/repositories.d"

      # Build complete repositories ini
      echo "" > "${HOME}/.config/finwo/dep/repositories.tmp"
      if [ -f "${HOME}/.config/finwo/dep/repositories" ]; then
        echo "[repository]" >> "${HOME}/.config/finwo/dep/repositories.tmp"
        cat "${HOME}/.config/finwo/dep/repositories" >> "${HOME}/.config/finwo/dep/repositories.tmp"
      fi
      for fname in $(ls "${HOME}/.config/finwo/dep/repositories.d/" | sort); do
        echo "[repository]" >> "${HOME}/.config/finwo/dep/repositories.tmp"
        cat "${HOME}/.config/finwo/dep/repositories.d/${fname}" >> "${HOME}/.config/finwo/dep/repositories.tmp"
      done

      # Download and extract them
      while read source; do
        curl --location --progress-bar "${source}" | \
          tar --gunzip --extract --directory "${HOME}/.config/finwo/dep/packages" --strip-components 1
      done < <(ini_foreach ini_output_value "${HOME}/.config/finwo/dep/repositories.tmp" "repository.")

      # Aannddd.. we're done with the tmp file
      rm -f "${HOME}/.config/finwo/dep/repositories.tmp"

      ;;
    *)
      echo "Unknown command: ${CMD_REPO_CMD}" >&2
      exit 1
      ;;
  esac
}

cmds[${#cmds[*]}]="r"
cmds[${#cmds[*]}]="repo"
cmds[${#cmds[*]}]="repository"

function main {
  cmd=help

  while [ "$#" -gt 0 ]; do

    # If argument is a command, pass parsing on to it & stop main parser
    if [[ " ${cmds[*]} " =~ " $1 " ]]; then
      cmd=$1
      shift
      arg_$cmd "$@"
      break
    fi

    # Main parser
    case "$1" in
      --)
        shift
        break 2
        ;;
      *)
        echo "Unknown argument: $1" >&2
        exit 1
        ;;
    esac
    shift

  done

  cmd_$cmd
}

if [ $(basename $0) == "dep" ]; then
  main "$@"
fi
